"""
Module to evaluate our poem based on similarity, readability, and positivity

Author: Dejie Zhen
CSCI 3725
Date: November 22, 2022
"""

import spacy
import eng_spacysentiment
import glob
from django.conf import settings
import textstat
import time
import os

class Evaluator:
    def __init__(self, initial_poem, cleaned_poem, 
                    word_match_cnt, suggest_word_cnt) -> None:
        """
        Evaluator class that will take in poem and evaluate it on various
        criterias including similarity, readability, and positivity

        Args:
            initial_poem(str): initial poem generated by neural network
            cleaned_poem(str): processed and cleaned poem
            word_match_cnt(int): amount of times word change with word match
            suggest_word_cnt(int): amount of times word changed with suggestion
        """
        self.nlp = spacy.load("en_core_web_lg")
        self.initial_poem = initial_poem
        self.cleaned_poem = cleaned_poem
        self.word_match_cnt = word_match_cnt
        self.suggest_word_cnt = suggest_word_cnt

    def write_metrics(self):
        """
        Write all the evaluation metrics into the metrics folder along with
        the poem

        Args:
            none
        """
        curr_time =  time.strftime("%H:%M:%S", time.localtime())
        parent_dir = settings.BASE_DIR + '/metrics/'
        file = os.path.join(parent_dir, curr_time)
        poem_similarity = self.evaluate_poem_similarity()
        cleaned_poem_similarity = self.evaluate_old_new()
        automated_score, flesch_score, dale_chall = self.evaluate_poem_readability()
        emotions_scores = self.evaluate_emotions()
        
        with open(file, 'w') as f:
            f.write('Power Up Asia')
            f.write('\n')
            f.write('-'*70)
            f.write('\n')
            f.write(self.cleaned_poem)
            f.write('\n\n')
            f.write('Evaluation')
            f.write('\n')
            f.write('-'*70)
            f.write('\n')
            f.write('Poem Similarity: ' + str(poem_similarity))
            f.write('\n')
            f.write('Poem Readability: ')
            f.write('\n')
            f.write('https://tinyurl.com/49dsfmrf')
            f.write('\n')
            f.write('     Automatic Score: ' + str(automated_score) \
                + '(grade level)\n')
            f.write('     Flesch Reading Ease Score: ' + str(flesch_score) \
                + '/100' + '\n')
            f.write('     Dale-Chall Score ' + str(dale_chall) + '\n')
            f.write('\n')
            f.write('Cleaned Poem Similarity: ' + str(cleaned_poem_similarity))
            f.write('\n')
            f.write('     Word Matched Change Count: ' \
                + str(self.word_match_cnt))
            f.write('\n')
            f.write('     Suggested Word Change Count: ' \
                + str(self.suggest_word_cnt))
            f.write('\n\n')
            f.write('Emotional Score: \n')
            f.write('     positive ' + str(emotions_scores['positive']) + '\n')
            f.write('     negative ' + str(emotions_scores['negative']) + '\n')

    def evaluate_poem_similarity(self):
        """
        Evaluate the similarity between poem and some input poems that was
        used to create the model

        Args:
            none
        """
        poem_doc = self.nlp(self.cleaned_poem)

        static_folder = settings.STATICFILES_DIRS[0]
        files = static_folder + '/input/*.txt'
        read_files = glob.glob(files)
        scores = []
        for f in read_files: 
            file = open(f).read()
            doc = self.nlp(file)
            similarity = poem_doc.similarity(doc)
            scores.append(similarity)
                
        score = sum(scores) / len(read_files)
        return score

    def evaluate_poem_readability(self):
        # https://en.wikipedia.org/wiki/Readability
        """
        Evaluate how readable the poem is using various readability formulas
        including automated, flesch reading ease, and dale chall

        Source: https://en.wikipedia.org/wiki/Readability

        Args:
            none
        """
        print(self.cleaned_poem)
        automated_score = textstat.automated_readability_index(self.cleaned_poem)
        flesch_score = textstat.flesch_reading_ease(self.cleaned_poem)
        dale_chall = textstat.dale_chall_readability_score(self.cleaned_poem)
        return automated_score, flesch_score, dale_chall

    def evaluate_old_new(self):
        """
        Evaluate the similarity between the initial poem and cleaned poem to
        measure how effective the cleaning process was

        Args:
            none
        """
        doc1 = self.nlp(self.initial_poem)
        doc2 = self.nlp(self.cleaned_poem)
        return doc2.similarity(doc1)

    def evaluate_emotions(self):
        """
        Evaluate the poem on positivity and negativity

        Args:
            none
        """
        nlp = eng_spacysentiment.load()
        doc = nlp(self.cleaned_poem)
        return doc.cats
